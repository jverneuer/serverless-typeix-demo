"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
/**
 * Create unique id
 *
 * @returns {string}
 */
function uuid() {
    let d = new Date().getTime();
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
        let r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c == "x" ? r : (r & 0x3 | 0x8)).toString(16);
    });
}
exports.uuid = uuid;
/**
 * Check if token is in array
 * @param arr
 * @param token
 * @return {boolean}
 */
function inArray(arr, token) {
    return isArray(arr) && arr.indexOf(token) > -1;
}
exports.inArray = inArray;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function toString
 *
 * @description
 * Try to serialize object
 */
function toString(value, toJsonString = true) {
    if (!isString(value)) {
        try {
            if (toJsonString) {
                return JSON.stringify(value);
            }
            return util_1.inspect(value, { depth: 10 });
        }
        catch (e) {
            return util_1.inspect(value, { depth: 10 });
        }
    }
    return value;
}
exports.toString = toString;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isBoolean
 *
 * @description
 * Check if value is boolean
 */
function isBoolean(value) {
    return typeof value === "boolean";
}
exports.isBoolean = isBoolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isUndefined
 *
 * @description
 * Check if value is un-defined
 */
function isUndefined(value) {
    return typeof value === "undefined";
}
exports.isUndefined = isUndefined;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isString
 *
 * @description
 * Check if value is string
 */
function isString(value) {
    return typeof value === "string";
}
exports.isString = isString;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isNumber
 *
 * @description
 * Check if value is isNumber
 */
function isNumber(value) {
    return typeof value === "number" && !isNaN(value);
}
exports.isNumber = isNumber;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isArray
 *
 * @description
 * Check if value is array
 */
function isArray(value) {
    return Array.isArray(value);
}
exports.isArray = isArray;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isNull
 *
 * @description
 * Check if value is funciton
 */
function isNull(value) {
    return value === null;
}
exports.isNull = isNull;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isFunction
 *
 * @description
 * Check if value is funciton
 */
function isFunction(value) {
    return typeof value === "function";
}
exports.isFunction = isFunction;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isArray
 *
 * @description
 * Check if value is array
 */
function isDate(value) {
    return Object.prototype.toString.call(value) === "[object Date]";
}
exports.isDate = isDate;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isRegExp
 *
 * @description
 * Check if object is an regular expression
 */
function isRegExp(value) {
    return Object.prototype.toString.call(value) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isObject
 *
 * @description
 * Check if value is object
 */
function isObject(value) {
    return !isNull(value) && typeof value === "object";
}
exports.isObject = isObject;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isPresent
 *
 * @description
 * Check if value is object
 */
function isPresent(value) {
    return !isNull(value) && !isUndefined(value);
}
exports.isPresent = isPresent;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isTruthy
 *
 * @description
 * we are doing data type conversion to see if value is considered true value
 */
function isTruthy(value) {
    return !isFalsy(value);
}
exports.isTruthy = isTruthy;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isFalsy
 *
 * @description
 * we are doing data type conversion to see if value is considered false value
 */
function isFalsy(value) {
    return isNull(value) || isUndefined(value) || value === "" || value === false || value === 0 ||
        (typeof value === "number" && isNaN(value));
}
exports.isFalsy = isFalsy;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isClass
 *
 * @description
 * Check if type is class
 */
function isClass(value) {
    return isFunction(value) && /^\s*class\s+/.test(value.toString());
}
exports.isClass = isClass;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isEqual
 *
 * @description
 * Check if two objects are equal
 */
function isEqual(a, b) {
    if (isString(a)) {
        return a === b;
    }
    else if (_isNumber(a)) {
        if (isNaN(a) || isNaN(b)) {
            return isNaN(a) === isNaN(b);
        }
        return a === b;
    }
    else if (isBoolean(a)) {
        return a === b;
    }
    else if (isDate(a)) {
        return a.getTime() === b.getTime();
    }
    else if (isRegExp(a)) {
        return a.source === b.source;
    }
    else if (isArray(a) && isArray(b)) {
        // check references first
        if (a === b) {
            return true;
        }
        else if (a.constructor.name !== b.constructor.name) {
            return false;
        }
        else if (a.length === 0 && b.length === 0) {
            return true;
        }
        try {
            if (a.length !== b.length) {
                return false;
            }
            return a.every((item, index) => isEqual(item, b[index]));
        }
        catch (e) {
            throw e;
        }
    }
    else if (isObject(a) && isObject(b)) {
        let equal = [];
        let aLen = Object.keys(a).length;
        let bLen = Object.keys(b).length;
        // check references first
        if (a === b) {
            return true;
        }
        else if (a.constructor.name !== b.constructor.name) {
            return false;
        }
        else if (aLen === 0 && bLen === 0) {
            return true;
        }
        try {
            if (aLen === bLen) {
                Object.keys(a).forEach(key => equal.push(isEqual(a[key], b[key])));
            }
        }
        catch (e) {
            throw e;
        }
        if (equal.length === 0) {
            return false;
        }
        return equal.every((item) => item === true);
        /// compare undefined and nulls
    }
    else if (a === b) {
        return true;
    }
    return false;
}
exports.isEqual = isEqual;
/**
 * Internal is number
 * @param value
 * @returns {boolean}
 * @private
 */
function _isNumber(value) {
    return typeof value === "number";
}
//# sourceMappingURL=core.js.map