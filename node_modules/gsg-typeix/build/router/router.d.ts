import { Headers, RouteRuleConfig, IResolvedRoute, TRoute } from "../interfaces/iroute";
/**
 * @since 1.0.0
 * @enum
 * @name Methods
 *
 * @description
 * ControllerResolver methods
 */
export declare enum Methods {
    GET = 0,
    HEAD = 1,
    DELETE = 2,
    TRACE = 3,
    OPTIONS = 4,
    CONNECT = 5,
    POST = 6,
    PUT = 7,
    PATCH = 8
}
/**
 * @since 1.0.0
 * @function
 * @name getMethodName
 * @param {string} method
 *
 * @description
 * Get method name from Methods enum
 */
export declare function getMethodName(method: Methods): string;
/**
 * @since 1.0.0
 * @function
 * @name getMethod
 * @param {string} method
 *
 * @description
 * Get method enum from method string
 * @throws TypeError
 */
export declare function getMethod(method: string): Methods;
/**
 * @since 1.0.0
 * @class
 * @name Router
 * @constructor
 * @description
 * Router is a component for handling routing in system.
 * All routes should be added during bootstrap process
 * @example
 * import { Bootstrap, Router } from "../core";
 * import { Assets } from "./components/assets";
 *
 * \@Bootstrap({
 *    port: 9000
 * })
 * export class Application {
 *   constructor(assets: Assets, router: Router) {
 *       router.add()
 *   }
 * }
 */
export declare class Router {
    /**
     * @param {Logger} logger
     */
    private logger;
    /**
     * @param {Injector} injector
     */
    private injector;
    /**
     * @param {Array<Route>} routes
     */
    private routes;
    /**
     * ErrorMessage route definition
     * @param {String} errorRoute
     */
    private errorRoutes;
    /**
     * @since 1.0.0
     * @function
     * @name Router#prefixSlash
     * @param {string} value
     * @static
     * @private
     *
     * @description
     * Prefixes url with starting slash
     */
    static prefixSlash(value: string): string;
    /**
     * @since 1.0.0
     * @function
     * @name Router#getError
     *
     * @description
     * Returns error route string
     */
    getError(module?: string): string;
    /**
     * @since 1.0.0
     * @function
     * @name Router#hasErrorRoute
     *
     * @description
     * Check if error route is provided
     */
    hasError(): boolean;
    /**
     * @since 1.0.0
     * @function
     * @name Router#setError
     * @param {string} route
     *
     * @description
     * Add error route
     */
    setError(route: string): void;
    /**
     * @since 1.0.0
     * @function
     * @name Router#addRules
     * @param {Array<RouteRuleConfig>} rules
     *
     * @description
     * Add route to routes list.
     * All routes must be inherited from Route interface.
     */
    addRules(rules: Array<RouteRuleConfig>): void;
    /**
     * @since 1.0.0
     * @function
     * @name Router#addRule
     * @param {Function} Class
     * @param {RouteRuleConfig} config
     *
     * @description
     * Create rule and add rule to list
     */
    addRule(Class: TRoute, config?: RouteRuleConfig): void;
    /**
     * @since 1.0.0
     * @function
     * @name Router#createRule
     * @param {Function} Class
     * @param {RouteRuleConfig} config
     *
     * @description
     * Initialize rule
     */
    private createRule;
    /**
     * @since 1.0.0
     * @function
     * @name Router#parseRequest
     * @param {String} pathName
     * @param {String} method
     * @param {Headers} headers
     *
     * @description
     * Parse request based on pathName and method
     */
    parseRequest(pathName: string, method: string, headers: Headers): Promise<IResolvedRoute>;
    /**
     * @since 1.0.0
     * @function
     * @name Router#createUrl
     * @param {String} routeName
     * @param {Object} params
     *
     * @description
     * Create url based on route and params
     */
    createUrl(routeName: string, params: Object): Promise<string>;
}
