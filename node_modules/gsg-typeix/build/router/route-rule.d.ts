import { Route, Headers, IResolvedRoute } from "../interfaces/iroute";
import { IAfterConstruct } from "../interfaces/iprovider";
/**
 * @since 1.0.0
 * @function
 * @name RouteRule
 * @constructor
 *
 * @param {RouteRuleConfig} config
 *
 * @description
 * Route rule provider is used by router to parse request and create route url
 */
export declare class RouteRule implements Route, IAfterConstruct {
    private config;
    private routeParser;
    /**
     * @since 1.0.0
     * @function
     * @name RouteRule#afterConstruct
     * @private
     *
     * @description
     * After construct apply config data
     */
    afterConstruct(): void;
    /**
     * @since 1.0.0
     * @function
     * @name RouteRule#parseRequest
     * @param {String} path
     * @param {String} method
     * @param {Headers} headers
     * @private
     *
     * @return {Promise<IResolvedRoute>}
     * @static
     *
     * @description
     * Parse request is used internally by Router to be able to parse request
     */
    parseRequest(path: string, method: string, headers: Headers): Promise<IResolvedRoute | boolean>;
    /**
     * @since 1.0.0
     * @function
     * @name RouteRule#parseRequest
     * @param {String} routeName
     * @param {Object} params
     * @private
     *
     * @return {Promise<string|boolean>}
     * @static
     *
     * @description
     * It try's to create url
     */
    createUrl(routeName: string, params: Object): Promise<string | boolean>;
}
