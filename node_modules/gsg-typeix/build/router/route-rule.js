"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const route_parser_1 = require("./route-parser");
const router_1 = require("./router");
const injectable_1 = require("../decorators/injectable");
const inject_1 = require("../decorators/inject");
/**
 * @since 1.0.0
 * @function
 * @name RouteRule
 * @constructor
 *
 * @param {RouteRuleConfig} config
 *
 * @description
 * Route rule provider is used by router to parse request and create route url
 */
let RouteRule = class RouteRule {
    /**
     * @since 1.0.0
     * @function
     * @name RouteRule#afterConstruct
     * @private
     *
     * @description
     * After construct apply config data
     */
    afterConstruct() {
        this.routeParser = route_parser_1.RouteParser.parse(this.config.url);
    }
    /**
     * @since 1.0.0
     * @function
     * @name RouteRule#parseRequest
     * @param {String} path
     * @param {String} method
     * @param {Headers} headers
     * @private
     *
     * @return {Promise<IResolvedRoute>}
     * @static
     *
     * @description
     * Parse request is used internally by Router to be able to parse request
     */
    parseRequest(path, method, headers) {
        if (!this.routeParser.isValid(path) || this.config.methods.indexOf(router_1.getMethod(method)) === -1) {
            return Promise.resolve(false);
        }
        return Promise.resolve({
            method: router_1.getMethod(method),
            params: this.routeParser.getParams(path),
            route: this.config.route
        });
    }
    /**
     * @since 1.0.0
     * @function
     * @name RouteRule#parseRequest
     * @param {String} routeName
     * @param {Object} params
     * @private
     *
     * @return {Promise<string|boolean>}
     * @static
     *
     * @description
     * It try's to create url
     */
    createUrl(routeName, params) {
        if (this.config.route === routeName) {
            return Promise.resolve(this.routeParser.createUrl(params));
        }
        return Promise.resolve(false);
    }
};
__decorate([
    inject_1.Inject("config"),
    __metadata("design:type", Object)
], RouteRule.prototype, "config", void 0);
RouteRule = __decorate([
    injectable_1.Injectable()
], RouteRule);
exports.RouteRule = RouteRule;
//# sourceMappingURL=route-rule.js.map