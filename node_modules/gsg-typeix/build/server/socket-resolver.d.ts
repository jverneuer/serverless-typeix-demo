/// <reference types="node" />
import { IncomingMessage } from "http";
import { IResolvedRoute } from "../interfaces";
import { EventEmitter } from "events";
import * as WebSocket from "ws";
/**
 * @since 2.0.0
 * @private
 * @class
 * @name SocketResolver
 * @constructor
 *
 * @description
 * This component is responsible for finding and instantiating the correctly annotated {@link WebSocket} class
 * in the application. It is used internally by the framework.
 */
export declare class SocketResolver {
    /**
     * The original incoming upgrade request
     */
    private request;
    /**
     * Data received by client on initial POST, PATCH, PUT requests
     */
    private data;
    /**
     * UUID identifier of request
     */
    private id;
    /**
     * The designated {@link WebSocket} provider
     */
    private socketProvider;
    /**
     * Resolved route from injector
     */
    private resolvedRoute;
    /**
     * Injector which created request
     */
    private injector;
    /**
     * Provided by injector
     */
    private logger;
    /**
     * Responsible for handling events
     */
    private eventEmitter;
    /**
     * Created socket instance
     */
    private socket;
    /**
     * @since 2.0.0
     * @private
     * @function
     * @name SocketResolver#getEventEmitter
     *
     * @description
     * Get request event emitter
     */
    getEventEmitter(): EventEmitter;
    /**
     * @since 2.0.0
     * @private
     * @function
     * @name SocketResolver#getIncomingMessage
     *
     * @description
     * Get underlying upgrade request
     */
    getIncomingMessage(): IncomingMessage;
    /**
     * @since 2.0.0
     * @private
     * @function
     * @name SocketResolver#getResolvedRoute
     *
     * @description
     * Get originally resolved route
     */
    getResolvedRoute(): IResolvedRoute;
    /**
     * @since 2.0.0
     * @private
     * @function
     * @name SocketResolver#getId
     *
     * @description
     * Get unique request ID
     */
    getId(): string;
    /**
     * @since 2.0.0
     * @private
     * @function
     * @name SocketResolver#getBody
     *
     * @description
     * Get the data sent with the upgrade request
     */
    getBody(): Array<Buffer>;
    /**
     * @since 2.0.0
     * @private
     * @function
     * @name SocketResolver#destroy
     *
     * @description
     * Destroy all references to free memory
     */
    destroy(): void;
    /**
     * @since 2.0.0
     * @private
     * @function
     * @name SocketResolver#process
     * @return {Promise<SocketResolver>} Promise to resolve when the socket was created and verified successfully
     *
     * @description
     * Process request logic by creating and verifying the socket
     */
    process(): Promise<SocketResolver>;
    /**
     * @sicne 2.0.0
     * @function
     * @name SocketResolver#openSocket
     * @param {WebSocket} ws The "ws".WebSocket representing the real socket
     * @return {Promise<any>} Promise to resolve when the socket has been opened successfully
     *
     * @description
     * Tries to call the open method on the created {@link WebSocket} and sets up message listeners.
     */
    openSocket(ws: WebSocket): Promise<any>;
    /**
     * @since 2.0.0
     * @function
     * @name SocketResolver#processSocketHook
     * @param {string} actionName Name of the {@link Hook} to invoke
     * @return {Promise<any>} Promise resolved when the hook had been invoked successfully
     *
     * @description
     * Tries to invoke the {@link Hook} for the given name on the created socket.
     */
    private processSocketHook;
    /**
     * @since 2.0.0
     * @private
     * @function
     * @name SocketResolver#getMappedHook
     * @param {IProvider} socketProvider The provider of the socket
     * @param {String} actionName The hook name to call
     * @return {IAction} The action representing the hook
     *
     * @description
     * Investigates the metadata of the given provider to find the action representing the hook with the given name.
     */
    private getMappedHook;
    /**
     * @since 2.0.0
     * @private
     * @function
     * @name SocketResolver#getAnnotatedArguments
     * @param {IProvider} provider The socket provider
     * @param {string} functionName The name of the function to get argument information for
     * @return {Array<any>} The values to use as arguments
     *
     * @description
     * Inspects the given function of the provider and returns the correct argument values
     */
    private getAnnotatedArguments;
}
