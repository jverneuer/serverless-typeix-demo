/// <reference types="node" />
import { Injector } from "../injector/injector";
import { Logger } from "../logger/logger";
import { IncomingMessage, ServerResponse } from "http";
import { IModule, IModuleMetadata } from "../interfaces/imodule";
import { IProvider } from "../interfaces/iprovider";
import { Router } from "../router/router";
export declare const BOOTSTRAP_PROVIDERS: (typeof Logger | typeof Router)[];
export declare const BOOTSTRAP_MODULE = "root";
/**
 * @since 1.0.0
 * @function
 * @name doModulesDuplicationCheck
 * @param {Array<IModule>} modules
 * @param {IModuleMetadata} metadata
 * @param {IProvider} provider
 */
export declare function doModulesDuplicationCheck(modules: Array<IModule>, metadata: IModuleMetadata, provider: IProvider): void;
/**
 * @since 1.0.0
 * @function
 * @name getModule
 * @param {Array<IModule>} modules
 * @param {String} name
 *
 * @description
 * Find root module
 */
export declare function getModule(modules: Array<IModule>, name?: string): IModule;
/**
 * @since 1.0.0
 * @function
 * @name createModule
 * @param {Provider|Function} Class
 * @param {Injector} sibling
 * @param {Array<IModule>} modules list
 *
 * @description
 * Bootstrap modules recursive handler imported modules and export services which is needed
 *
 */
export declare function createModule(Class: IProvider | Function, sibling?: Injector, modules?: any[]): Array<IModule>;
/**
 * @since 1.0.0
 * @function
 * @name fireRequest
 * @param {Array<IModule>} modules list of all modules bootstrapped
 * @param {IncomingMessage} request event emitter
 * @param {ServerResponse} response event emitter
 * @return {string|Buffer} data from controller
 *
 * @description
 * Use fireRequest to process request itself, this function is used by http/https server or
 * You can fire fake request
 */
export declare function fireRequest(modules: Array<IModule>, request: IncomingMessage, response: ServerResponse): Promise<string | Buffer>;
