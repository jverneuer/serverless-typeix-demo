/// <reference types="node" />
import { IncomingMessage, ServerResponse } from "http";
import { Injector } from "../injector/injector";
import { IProvider } from "../interfaces/iprovider";
import { EventEmitter } from "events";
import { IResolvedRoute } from "../interfaces/iroute";
import { IControllerMetadata } from "../interfaces/icontroller";
import { IAction } from "../interfaces/iaction";
/**
 * @since 1.0.0
 * @class
 * @name Request
 * @constructor
 * @description
 * ControllerResolver is responsible for handling router result and processing all requests in system
 * This component is used internally by framework
 *
 * @private
 */
export declare class ControllerResolver {
    /**
     * @param IncomingMessage
     * @description
     * Value provided by injector which handles request input
     */
    private request;
    /**
     * @param ServerResponse
     * @description
     * Value provided by injector which handles response output
     */
    private response;
    /**
     * @param {Array<Buffer>} data
     * @description
     * Data received by client on POST, PATCH, PUT requests
     */
    private data;
    /**
     * @param {Injector} Injector
     * @description
     * Injector which created request
     */
    private injector;
    /**
     * @param {Logger} logger
     * @description
     * Provided by injector
     */
    private logger;
    /**
     * @param {EventEmitter} eventEmitter
     * @description
     * Responsible for handling events
     */
    private eventEmitter;
    /**
     * @param {string} id
     * @description
     * UUID identifier of request
     */
    private id;
    /**
     * @param {Url} url
     * @description
     * Parsed request url
     */
    private url;
    /**
     * @param {IProvider} controllerProvider
     * @description
     * Injector
     */
    private controllerProvider;
    /**
     * @param {actionName} actionName:
     * @description
     * Action name
     */
    private actionName;
    /**
     * @param {boolean} isChainStopped
     * @description
     * When chain is stopped framework will not propagate actions
     */
    private isChainStopped;
    /**
     * @param {IResolvedRoute} resolvedRoute
     * @description
     * Resolved route from injector
     */
    private resolvedRoute;
    /**
     * @since 1.0.0
     * @function
     * @name Request#isControllerPrototypeOf
     * @private
     * @description
     * Validate controller inheritance
     */
    static isControllerInherited(a: Function, b: Function): boolean;
    /**
     * @since 1.0.0
     * @function
     * @name Request#stopChain
     * @private
     * @description
     * Stop action chain
     */
    stopChain(): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#destroy
     * @private
     * @description
     * Destroy all references to free memory
     */
    destroy(): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getEventEmitter
     * @private
     *
     * @description
     * Get request event emitter
     */
    getEventEmitter(): EventEmitter;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getIncomingMessage
     * @private
     *
     * @description
     * Get IncomingMessage object
     */
    getIncomingMessage(): IncomingMessage;
    getResolvedRoute(): IResolvedRoute;
    getId(): string;
    getBody(): Array<Buffer>;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getServerResponse
     * @private
     *
     * @description
     * Get ServerResponse object
     */
    getServerResponse(): ServerResponse;
    /**
     * @since 1.0.0
     * @function
     * @name Request#process
     * @private
     * @description
     * Process request logic
     */
    process(): Promise<string | Buffer>;
    /**
     * @since 1.0.0
     * @function
     * @name Request#hasMappedAction
     * @private
     * @description
     * Check if controller has mapped action
     */
    hasMappedAction(controllerProvider: IProvider, actionName: String, name?: String): boolean;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getMappedHook
     * @private
     * @description
     * Returns a mapped action metadata
     */
    getMappedAction(controllerProvider: IProvider, actionName: String, name?: String): IAction;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getDecoratorByMappedAction
     * @private
     * @description
     * Get param decorator by mapped action
     */
    getDecoratorByMappedAction(controllerProvider: IProvider, mappedAction: any, paramName: string): any;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getMappedActionArguments
     * @private
     * @description
     * Get list of action arguments
     */
    getMappedActionArguments(controllerProvider: IProvider, mappedAction: any): Array<any>;
    /**
     * @since 1.0.0
     * @function
     * @name Request#processAction
     * @private
     * @description
     * Process mapped action
     */
    processAction(injector: Injector, controllerProvider: IProvider, mappedAction: IAction): string | Buffer;
    /**
     * @since 1.0.0
     * @function
     * @name Request#processControllerFilters
     * @private
     * @description
     * Process controller filters
     */
    processFilters(injector: Injector, metadata: IControllerMetadata, isAfter: boolean): Promise<any>;
    /**
     * @since 1.0.0
     * @function
     * @name Request#processController
     * @private
     * @description
     * Handle controller instance
     */
    processController(reflectionInjector: Injector, controllerProvider: IProvider, actionName: String): Promise<any>;
    /**
     * @since 1.0.0
     * @function
     * @name Request#benchmark
     * @private
     * @description
     * Print benchmark
     */
    private benchmark;
}
