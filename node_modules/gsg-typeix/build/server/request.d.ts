/// <reference types="node" />
import { IResolvedRoute } from "../interfaces";
import { MultiPartField, MultiPartFile } from "../parsers";
import { Status } from "./status-code";
import { Methods } from "../router";
import { IConnection } from "../interfaces/iconnection";
import { IncomingMessage } from "http";
export declare abstract class AbstractRequest {
    /**
     * @param cookies
     * @description
     * Cookies object are stored to this object first time they are parsed
     */
    private cookies;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getConnection
     *
     * @description
     * Get connection data
     */
    getConnection(): IConnection;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getCookies
     *
     * @description
     * Return parsed cookies
     */
    getCookies(): {
        [key: string]: string;
    };
    /**
     * @since 1.0.0
     * @function
     * @name Request#getCookie
     *
     * @description
     * Return request headers
     */
    getCookie(name: string): string;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getRequestHeaders
     *
     * @description
     * Return request headers
     */
    getRequestHeaders(): any;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getRequestHeader
     *
     * @description
     * Return request header by name
     */
    getRequestHeader(name: string): any;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getParams
     *
     * @description
     * Get all request parameters
     */
    getParams(): Object;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getParam
     * @param {string} name
     *
     * @description
     * Get resolve route param
     */
    getParam(name: string): string;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getMethod
     *
     * @description
     * Return resolved route method
     */
    getMethod(): Methods;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getRoute
     *
     * @description
     * Return resolved route name
     */
    getRoute(): string;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getBody
     * @private
     *
     * @description
     * Get request body if present only on POST, PUT, PATCH
     */
    getBody(): Buffer;
    /**
     * @since 1.0.0
     * @function
     * @name Request#getBodyAsMultiPart
     * @param {string} encoding
     *
     * @description
     * Get request body as multipart if present only on POST, PUT, PATCH
     */
    getBodyAsMultiPart(encoding?: string): Array<MultiPartField | MultiPartFile>;
    abstract getId(): string;
    protected abstract getIncomingMessage(): IncomingMessage;
    protected abstract getResolvedRoute(): IResolvedRoute;
    protected abstract getRawData(): Array<Buffer>;
}
/**
 * @since 2.0.0
 * @class
 * @name BaseRequest
 * @constructor
 * @description
 * Provides a basic API to the original request - does only support retrieving information.
 */
export declare class BaseRequest extends AbstractRequest {
    private readonly incomingMessage;
    private readonly id;
    private readonly data;
    private readonly resolvedRoute;
    getId(): string;
    protected getIncomingMessage(): IncomingMessage;
    protected getResolvedRoute(): IResolvedRoute;
    protected getRawData(): Array<Buffer>;
}
/**
 * @since 1.0.0
 * @class
 * @name Request
 * @constructor
 * @description
 * Get request reflection to limit public api
 */
export declare class Request extends AbstractRequest {
    /**
     * @param ControllerResolver
     * @description
     * Current internal ControllerResolver instance
     */
    private readonly controllerResolver;
    /**
     * @since 1.0.0
     * @function
     * @name Request#onDestroy
     *
     * @description
     * Add destroy event to public api
     */
    onDestroy(callback: (...args: any[]) => void): void;
    /**
     * @since 0.0.1
     * @function
     * @name Request#setResponseCookie
     * @param {String} key cookie name
     * @param {String} value cookie value
     * @param {String|Object|Number} expires expire date
     * @param {String} path cookie path
     * @param {String} domain cookie domain
     * @param {Boolean} isHttpOnly is http only
     * @description
     * Sets an cookie header
     */
    setCookie(key: string, value: string, expires?: number | Date | string, path?: string, domain?: string, isHttpOnly?: boolean): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#setResponseHeader
     * @param {String} name
     * @param {String} value
     *
     * @description
     * Set response header
     */
    setResponseHeader(name: string, value: string | string[]): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#setContentType
     * @param {String} value
     *
     * @description
     * Set response content type
     */
    setContentType(value: string): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#setStatusCode
     *
     * @description
     * Set status code
     */
    setStatusCode(code: Status | number): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#stopChain
     *
     * @description
     * Stops action chain
     */
    stopChain(): void;
    /**
     * @since 1.0.0
     * @function
     * @name Request#redirectTo
     *
     * @description
     * Stops action chain
     */
    redirectTo(url: string, code: Status | number): void;
    getId(): string;
    protected getIncomingMessage(): IncomingMessage;
    protected getResolvedRoute(): IResolvedRoute;
    protected getRawData(): Array<Buffer>;
}
