import "reflect-metadata";
import { IProvider } from "../interfaces/iprovider";
export declare const INJECT_KEYS = "inject:paramtypes";
export declare const FUNCTION_KEYS = "function:decorators";
export declare const FUNCTION_PARAMS = "function:paramtypes";
export declare const DESIGN_PARAMTYPES_KEYS = "design:paramtypes";
export declare const DESIGN_KEYS = "design:type";
export declare const DESIGN_RETURN = "design:returntype";
export declare const COMPONENT_CONFIG_KEYS = "component:paramtypes";
/**
 * @since 1.0.0
 * @constructor
 * @function
 * @name Metadata
 *
 * @description
 * Metadata is responsible for getting or setting metadata definitions for some Class
 * It's crucial for injector
 */
export declare class Metadata {
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#getName
     * @param {Object} Class
     * @param {string} prefix
     *
     * @description
     * Get class name
     */
    static getName(Class: any, prefix?: string): string;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#inVerifiedProvider
     *
     * @param providers
     * @param provider
     * @returns {boolean}
     *
     * @description
     * Check if provider is in array of providers
     */
    static inVerifiedProviders(providers: Array<IProvider>, provider: IProvider): boolean;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#getVerifiedProvider
     *
     * @param providers
     * @param provider
     * @returns {boolean}
     *
     * @description
     * Get verified provider in providers
     */
    static getVerifiedProvider(providers: Array<IProvider>, provider: IProvider): IProvider;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#inProviders
     *
     * @param providers
     * @param provider
     * @returns {boolean}
     *
     * @description
     * Check if provider is in array of providers
     */
    static inProviders(providers: Array<any>, provider: any): boolean;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#getProviderInProviders
     *
     * @param {Array<any>} providers
     * @param {any} provider
     * @returns IProvider
     *
     * @description
     * Return provider in providers
     */
    static getProviderInProviders(providers: Array<any>, provider: any): IProvider;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#isProvider
     * @param token
     * @returns {boolean}
     *
     * @description
     * Check if token is provider
     */
    static isProvider(token: any): boolean;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#isDescriptor
     * @param {Object} value
     *
     * @description
     * Check if current object is descriptor object
     */
    static isDescriptor(value: Object): boolean;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#defineMetadata
     * @param {Function} token
     * @param {string} name
     * @param {Object} value
     * @return {any} value
     *
     * @description
     * Define metadata to some class
     */
    static defineMetadata(token: Function, name: string, value: any): boolean;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#hasMetadata
     * @param {Function} token
     * @param {string} name
     *
     * @description
     * Check if some class has metadata by key
     */
    static hasMetadata(token: Function, name: string): boolean;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#getMetadata
     * @param {Function} token
     * @param {String} name
     * @param {any} defaultValue
     *
     * @description
     * Get class metadata if not present return defaultValue
     */
    static getMetadata(token: Function, name: string, defaultValue?: any): any;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#getComponentConfig
     * @param {Function} Class
     *
     * @description
     * Get component config
     */
    static getComponentConfig(Class: Function): any;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#setComponentConfig
     * @param {Function} Class
     * @param {any} config
     *
     * @description
     * Sets component config
     */
    static setComponentConfig(Class: Function, config: any): void;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#getConstructorProviders
     * @param {Function} Class
     *
     * @description
     * Return constructor providers in order to be delivered new instance to current injectable class
     */
    static getConstructorProviders(Class: Function): Array<IProvider>;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#getConstructorPrototypeKeys
     * @param {Function} Class
     *
     * @description
     * Get keys metadata in order to know what Injector should do with them
     */
    static getConstructorPrototypeKeys(Class: Function): any;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#getConstructorInjectKeys
     * @param {Function} Class
     *
     * @description
     * Get all metadata on Class constructor so Injector can decide what to do with them
     */
    static getConstructorInjectKeys(Class: Function): Array<any>;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#hasProvider
     * @param {Array} providers
     * @param {Function} Class
     *
     * @description
     * Check if some list of providers are containing provider Class
     */
    static hasProvider(providers: Array<any>, Class: Function): boolean;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#mergeProviders
     * @param {Array<IProvider>} a
     * @param {Array<IProvider>} b
     *
     * @description
     * Merge two provider definitions, this is used by Injector internally to know what to deliver at what time.
     *
     * This might look confusing but it does copy only from b if does't exist in a and b is added to beginning of
     * sequence.
     *
     * It must be like that because module nesting issue.
     *
     */
    static mergeProviders(a: Array<IProvider>, b: Array<IProvider>): IProvider[];
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#verifyProviders
     * @param {Array<any>} providers
     *
     * @description
     * Verify all providers in list
     */
    static verifyProviders(providers: Array<any>): Array<IProvider>;
    /**
     * @since 1.0.0
     * @static
     * @function
     * @name Metadata#verifyProvider
     * @param {Any} value
     *
     * @description
     * Verify provider to be sure that metadata configuration is provided correctly so it can be used by Injector
     */
    static verifyProvider(value: any): IProvider;
}
