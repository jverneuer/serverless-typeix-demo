"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../core");
const metadata_1 = require("../injector/metadata");
/**
 * @since 1.0.0
 * @decorator
 * @function
 * @name Error
 *
 * @description
 * Chain propagate data from FilterBefore -> BeforeEach -> Before -> Action -> After -> AfterEach -> FilterAfter
 *
 * @example
 * import {Chain, Param, Controller, Action, Inject} from "typeix";
 *
 * \@Controller({
 *    name: "core"
 * })
 * class MyController{
 *
 *     \@Action("error")
 *     actionIndex(@ErrorMessage data) {
 *        return "My Index " + data;
 *     }
 * }
 */
exports.ErrorMessage = (Class, key, paramIndex) => {
    let type = "ErrorMessage";
    let metadata = [];
    if (metadata_1.Metadata.hasMetadata(Class, metadata_1.FUNCTION_PARAMS)) {
        metadata = metadata_1.Metadata.getMetadata(Class, metadata_1.FUNCTION_PARAMS);
    }
    if (!core_1.isNumber(paramIndex)) {
        throw new TypeError(`@${type} is not allowed ${metadata_1.Metadata.getName(Class, "on class ")} on ${paramIndex}
      @${type} is allowed only as parameter type!`);
    }
    metadata.push({
        type,
        key,
        value: null,
        paramIndex
    });
    metadata_1.Metadata.defineMetadata(Class, metadata_1.FUNCTION_PARAMS, metadata);
    return Class;
};
//# sourceMappingURL=error.js.map