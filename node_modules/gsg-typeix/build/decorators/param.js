"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../core");
const metadata_1 = require("../injector/metadata");
/**
 * @since 1.0.0
 * @decorator
 * @function
 * @name Param
 *
 * @description
 * Define Param metadata to deliver it from router
 *
 * @example
 * import {Param, Controller, Action, Inject} from "typeix";
 *
 * \@Controller({
 *    name: "myController"
 * })
 * class MyController{
 *
 *     \@Inject(AssetLoader)
 *     myAssetLoaderService: AssetLoader;
 *
 *     \@Action("index")
 *     assetLoader(@Param("file") file: string) {
 *        return this.myAssetLoaderService.load(file);
 *     }
 * }
 */
exports.Param = (value) => {
    return (Class, key, paramIndex) => {
        let type = "Param";
        let metadata = [];
        if (metadata_1.Metadata.hasMetadata(Class, metadata_1.FUNCTION_PARAMS)) {
            metadata = metadata_1.Metadata.getMetadata(Class, metadata_1.FUNCTION_PARAMS);
        }
        if (!core_1.isNumber(paramIndex)) {
            throw new TypeError(`@Param is not allowed ${metadata_1.Metadata.getName(Class, "on class ")} on ${paramIndex}
      @Param is allowed only as parameter type!`);
        }
        let param = {
            Class: Class.constructor,
            type,
            key,
            value,
            paramIndex
        };
        metadata.push(param);
        metadata_1.Metadata.defineMetadata(Class, metadata_1.FUNCTION_PARAMS, metadata);
        return Class;
    };
};
//# sourceMappingURL=param.js.map