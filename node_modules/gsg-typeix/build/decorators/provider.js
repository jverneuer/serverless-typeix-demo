"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../core");
const metadata_1 = require("../injector/metadata");
/**
 * @since 1.0.0
 * @decorator
 * @function
 * @name Provider
 *
 * @description
 * Provider decorator is used to define injectable and injections for class itself
 *
 * @example
 * import {Provider} from "typeix";
 * import {MyService} form "./services/my-service";
 *
 * \@Provider([MyService])
 * class AssetLoader{
 *    constructor(myService: MyService) {
 *
 *    }
 * }
 */
exports.Provider = (config) => {
    return (Class) => {
        if (!core_1.isClass(Class)) {
            throw new TypeError(`Provider is only allowed on class definition! Error found on ${Class.toString()}`);
        }
        else if (core_1.isPresent(config) && !core_1.isArray(config)) {
            throw new TypeError(`Provider value must be array of IProvider`);
        }
        metadata_1.Metadata.setComponentConfig(Class, {
            providers: core_1.isPresent(config) ? config.map(ProviderClass => metadata_1.Metadata.verifyProvider(ProviderClass)) : []
        });
        return Class;
    };
};
//# sourceMappingURL=provider.js.map