"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const metadata_1 = require("../injector/metadata");
const core_1 = require("../core");
/**
 * Produces response type
 * @decorator
 * @function
 * @name Produces
 *
 * @param {String} value
 *
 * @description
 * Produces content type
 */
exports.Produces = (value) => (Class, key, descriptor) => {
    let type = "Produces";
    let metadata = [];
    if (metadata_1.Metadata.hasMetadata(Class, metadata_1.FUNCTION_KEYS)) {
        metadata = metadata_1.Metadata.getMetadata(Class, metadata_1.FUNCTION_KEYS);
    }
    if (metadata.find(item => item.type === type && item.key === key)) {
        throw new TypeError(`Only one @${type} definition is allowed on ${key} ${metadata_1.Metadata.getName(Class, "on class ")}`);
    }
    else if (!metadata_1.Metadata.isDescriptor(descriptor) && !core_1.isEqual(Class, descriptor)) {
        throw new TypeError(`@${type} is allowed ony on function type ${metadata_1.Metadata.getName(Class, "on class ")}`);
    }
    let iAction = {
        type,
        key,
        value,
        proto: Class
    };
    metadata.push(iAction);
    metadata_1.Metadata.defineMetadata(Class, metadata_1.FUNCTION_KEYS, metadata);
    if (metadata_1.Metadata.isDescriptor(descriptor)) {
        descriptor.configurable = false;
        descriptor.writable = false;
    }
    return Class;
};
//# sourceMappingURL=produces.js.map