"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("../core");
const metadata_1 = require("../injector/metadata");
/**
 * @since 1.0.0
 * @decorator
 * @function
 * @name Filter
 *
 * @description
 * Filter is used as pre controller and after controller actions
 *
 * @example
 * import {IFilter, Filter, Request, Inject} from "typeix";
 *
 * \@Filter(100)
 * export class Cache implements IFilter {
 *
 *  \@Inject(Request)
 *  request: Request;
 *
 *
 *  before(): string|Buffer|Promise<string|Buffer> {
 *    return "Before controller";
 *  }
 *
 *  after(data: string): string|Buffer|Promise<string|Buffer> {
 *    return "After controller <- " + data;
 *  }
 *
 *}
 */
exports.Filter = (priority, route = "*") => {
    return (Class) => {
        if (!core_1.isClass(Class)) {
            throw new TypeError(`Filter is only allowed on class type of IFilter!  Error found on ${Class.toString()}`);
        }
        metadata_1.Metadata.setComponentConfig(Class, {
            priority,
            route
        });
        return Class;
    };
};
//# sourceMappingURL=filter.js.map