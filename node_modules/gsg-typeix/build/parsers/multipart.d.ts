/// <reference types="node" />
import { IBodyParser } from "../interfaces/ibodyparser";
/**
 * @since 1.0.0
 * @function
 * @name MultiPartField
 *
 * @description
 * Parsed multi part field
 */
export declare class MultiPartField {
    private fieldName;
    private fieldValue;
    private encoding;
    private buffer;
    constructor(fieldName: string, fieldValue: string, encoding: string, buffer: Buffer);
    getFieldName(): string;
    getFieldValue(): string;
    getEncoding(): string;
    getBuffer(): Buffer;
}
/**
 * @since 1.0.0
 * @function
 * @name MultiPartFile
 *
 * @description
 * Parsed multi part file
 */
export declare class MultiPartFile {
    private fieldName;
    private fileName;
    private encoding;
    private buffer;
    constructor(fieldName: string, fileName: string, encoding: string, buffer: Buffer);
    getFieldName(): string;
    getFileName(): string;
    getEncoding(): string;
    getBuffer(): Buffer;
}
/**
 * @since 1.0.0
 * @function
 * @name MultiPart
 *
 * @description
 * Multi part body parser
 */
export declare class MultiPart implements IBodyParser {
    contentType: string;
    private partBoundaryFlag;
    private boundaryChars;
    private state;
    private headerFieldDecoder;
    private headerValueDecoder;
    private partHeaders;
    private encoding;
    private boundaryLength;
    private boundary;
    private lookBehind;
    private partTransferEncoding;
    private partName;
    private partFileName;
    private partFileBufferList;
    private headerField;
    private headerValue;
    private headerFieldMark;
    private headerValueMark;
    private partDataMark;
    private partData;
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#constructor
     * @param {string} contentType
     * @param {string} encoding
     *
     * @description
     * Multi part constructor
     */
    constructor(contentType: string, encoding?: string);
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#parse
     * @param {Buffer} buffer
     *
     * @description
     * Parse multipart buffer and return structured data
     */
    parse(buffer: Buffer): Array<MultiPartField | MultiPartFile>;
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#onParseHeaderEnd
     * @private
     *
     * @description
     * On parse header end
     */
    private onParseHeaderEnd;
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#onParsePartEnd
     * @private
     *
     * @description
     * On parse end set values
     */
    private onParsePartEnd;
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#onParseHeadersEnd
     * @private
     *
     * @description
     * Parse headers end
     */
    private onParseHeadersEnd;
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#parseFilename
     * @param {String} headerValue
     * @private
     *
     * @description
     * Parse file name
     */
    private parseFilename;
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#onParseHeaderField
     * @private
     *
     * @description
     * Parse header filed
     */
    private onParseHeaderField;
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#onParseHeaderValue
     * @private
     *
     * @description
     * Parse header value
     */
    private onParseHeaderValue;
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#onParsePart
     * @private
     *
     * @description
     * Push file to buffer
     */
    private onParsePart;
    /**
     * @since 1.0.0
     * @function
     * @name MultiPart#clearPartVars
     * @private
     *
     * @description
     * Clear part variables
     */
    private clearPartVars;
}
