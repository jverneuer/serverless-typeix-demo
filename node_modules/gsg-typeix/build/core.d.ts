/**
 * Create unique id
 *
 * @returns {string}
 */
export declare function uuid(): string;
/**
 * Check if token is in array
 * @param arr
 * @param token
 * @return {boolean}
 */
export declare function inArray(arr: Array<any>, token: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function toString
 *
 * @description
 * Try to serialize object
 */
export declare function toString(value: any, toJsonString?: boolean): string;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isBoolean
 *
 * @description
 * Check if value is boolean
 */
export declare function isBoolean(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isUndefined
 *
 * @description
 * Check if value is un-defined
 */
export declare function isUndefined(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isString
 *
 * @description
 * Check if value is string
 */
export declare function isString(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isNumber
 *
 * @description
 * Check if value is isNumber
 */
export declare function isNumber(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isArray
 *
 * @description
 * Check if value is array
 */
export declare function isArray(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isNull
 *
 * @description
 * Check if value is funciton
 */
export declare function isNull(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isFunction
 *
 * @description
 * Check if value is funciton
 */
export declare function isFunction(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isArray
 *
 * @description
 * Check if value is array
 */
export declare function isDate(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isRegExp
 *
 * @description
 * Check if object is an regular expression
 */
export declare function isRegExp(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isObject
 *
 * @description
 * Check if value is object
 */
export declare function isObject(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isPresent
 *
 * @description
 * Check if value is object
 */
export declare function isPresent(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isTruthy
 *
 * @description
 * we are doing data type conversion to see if value is considered true value
 */
export declare function isTruthy(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isFalsy
 *
 * @description
 * we are doing data type conversion to see if value is considered false value
 */
export declare function isFalsy(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isClass
 *
 * @description
 * Check if type is class
 */
export declare function isClass(value: any): boolean;
/**
 * @since 1.0.0
 * @author Igor Ivanovic
 * @function isEqual
 *
 * @description
 * Check if two objects are equal
 */
export declare function isEqual(a: any, b: any): boolean;
